# -*- coding: utf-8 -*-
"""PrediksiBatuGinjal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-muqCrunMXYLYtoxqyg2E3NDgCVmp5XG
"""

import pandas as pd
import numpy as np

"""LOAD DATASET"""

df = pd.read_csv('kidney_disease.csv')
df.sample()

df = df.drop(['id','age'],axis=1)

df.sample()

df.info()

numerical = []
catgcols = []

for col in df.columns:
  if df[col].dtype=="float64":
     numerical.append(col)
  else:
    catgcols.append(col)

for col in df.columns:
  if col in numerical:
    df[col].fillna(df[col].median(), inplace=True)
  else:
    df[col].fillna(df[col].mode()[0], inplace=True)

numerical

catgcols

df['classification'].value_counts()

df['classification'] = df['classification'].replace(['ckd\t'],'ckd')

df['classification'].value_counts()

ind_col = [col for col in df.columns if col !='clasification']
dep_col = 'classification'

df[dep_col].value_counts()

"""TRANSFORMASI DATASET"""

from sklearn.preprocessing import LabelEncoder

le =  LabelEncoder()

for col  in catgcols:
  df[col] =le.fit_transform(df[col])

df['classification']= le.fit_transform(df['classification'])

x= df[ind_col]
y= df[dep_col]

df.head()

df.to_csv('kidney-disease.csv')

from sklearn.model_selection import train_test_split

x_train,x_test, y_train, y_test= train_test_split(x, y, test_size=0.20, random_state=0)

"""membuat model decision tree"""

from sklearn.metrics import accuracy_score,confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
dtc = DecisionTreeClassifier(
    ccp_alpha=0.0, class_weight=None, criterion='entropy',
    max_depth=4, max_features=None ,max_leaf_nodes=None,
    min_impurity_decrease=0.0, min_samples_leaf=1,
    min_samples_split=2, min_weight_fraction_leaf=0.0,
    random_state=42, splitter='best'
)

model= dtc.fit(x_train,y_train)

dtc_acc = accuracy_score(y_test, dtc.predict(x_test))

print(f"akurasi data training = {accuracy_score(y_train,dtc.predict(x_train))}")
print(f"akurasi data testing = {dtc_acc} \n")

print(f"confuion matrix : \n{confusion_matrix(y_test, dtc.predict(x_test))}\n")
confusion = confusion_matrix(y_test, dtc.predict(x_test))
tn, fp, fn, tp = confusion.ravel()
print(f"classification report : \n {classification_report(y_test,dtc.predict(x_test))}")

"""simulasi model"""

input_data = (80.0,1.02,1.0,0.0,1,1,0,0,121.0,36.0,1.2,138.0,4.4,15.4,32,72,34,1,4,1,0,0,0,0)

input_data_as_numpy_array = np.array(input_data)

input_data_reshape =input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshape)
print(prediction)

if (prediction[0]==0):
  print ('Pasien tidak terkena batu ginjal')
else:
  print('Pasien tidak terkena batu ginjal')

"""visualisasi pohon keputusan"""

import matplotlib.pyplot as plt
fig =plt.figure(figsize=(25,20))
_=tree.plot_tree(model,
                 feature_names=ind_col,
                 class_names=['notckd','ckd'],
                 filled=True)